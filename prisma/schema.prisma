// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BundleStatus {
  draft
  active
  archived
}

enum JobStatus {
  pending
  processing
  completed
  failed
}

enum JobType {
  publish
  unpublish
  sync
}

enum PricingType {
  percentage
  fixed
}

model Session {
  id             String    @id
  shop           String
  state          String
  isOnline       Boolean   @default(false)
  scope          String?
  expires        DateTime?
  accessToken    String
  userId         BigInt?
  firstName      String?
  lastName       String?
  email          String?
  accountOwner   Boolean   @default(false)
  locale         String?
  collaborator   Boolean?  @default(false)
  emailVerified  Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([shop])
}

model Bundle {
  id          String         @id @default(cuid())
  name        String
  description String?
  shopId      String
  status      BundleStatus   @default(draft)
  active      Boolean        @default(false)
  publishedAt DateTime?
  settings    Json?
  matching    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  steps       BundleStep[]
  pricing     BundlePricing?
  analytics   BundleAnalytics[]

  @@index([shopId])
  @@index([status])
}

model BundleStep {
  id                        String        @id @default(uuid())
  name                      String
  icon                      String?       @default("box")
  position                  Int           @default(0)
  minQuantity               Int           @default(1)
  maxQuantity               Int           @default(1)
  enabled                   Boolean       @default(true)
  productCategory           String?
  collections               Json?
  products                  Json?
  displayVariantsAsIndividual Boolean @default(false)
  conditionType             String?
  conditionValue            Int?
  bundleId                  String
  bundle                    Bundle        @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  StepProduct               StepProduct[]
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  @@index([bundleId])
}

model StepProduct {
  id          String     @id @default(uuid())
  stepId      String
  step        BundleStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  productId   String     // Shopify product ID
  title       String
  imageUrl    String?
  variants    Json?
  minQuantity Int        @default(1)
  maxQuantity Int        @default(1)
  position    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([stepId])
  @@index([productId])
}

model BundlePricing {
  id          String      @id @default(uuid())
  bundleId    String      @unique
  bundle      Bundle      @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  type        PricingType @default(percentage)
  status      Boolean     @default(false)
  rules       Json?
  showFooter  Boolean     @default(true)
  showBar     Boolean     @default(false)
  messages    Json?
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([bundleId])
}

model BundleAnalytics {
  id          String   @id @default(uuid())
  bundleId    String
  bundle      Bundle   @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  shopId      String
  event       String   // view, add_to_cart, purchase
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([bundleId])
  @@index([shopId])
  @@index([event])
  @@index([createdAt])
}

model ShopSettings {
  id              String   @id @default(uuid())
  shopId          String   @unique
  theme           Json?
  defaultSettings Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([shopId])
}

model QueuedJob {
  id          String    @id @default(uuid())
  shopId      String
  type        JobType   @default(publish)
  status      JobStatus @default(pending)
  data        Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shopId])
  @@index([status])
  @@index([type])
}

// Add a model for storing GDPR compliance records
model ComplianceRecord {
  id          String   @id @default(uuid())
  shop        String
  type        String   // customer_data_request, customer_redact, shop_redact
  payload     Json
  status      String   @default("pending") // pending, processing, completed
  processedAt DateTime?
  createdAt   DateTime @default(now())

  @@index([shop])
  @@index([type])
  @@index([status])
}
